#
# SVN commit 1033327 by djarvie:
# 
# Ensure all-day is set consistently for recurrences
# 

Index: kalarm/karecurrence.cpp
===================================================================
--- kalarm/karecurrence.cpp	(révision 1033326)
+++ kalarm/karecurrence.cpp	(révision 1033327)
@@ -154,7 +154,7 @@
 		}
 		mFeb29Type = feb29Type;
 	}
-	setStartDateTime(startdt);   // sets recurrence all-day if date-only
+	KCal::Recurrence::setStartDateTime(startdt);   // sets recurrence all-day if date-only
 	return true;
 }
 
Index: kalarm/alarmevent.cpp
===================================================================
--- kalarm/alarmevent.cpp	(révision 1033326)
+++ kalarm/alarmevent.cpp	(révision 1033327)
@@ -3030,10 +3030,10 @@
 	DateTime next;
 	nextRecurrence(mNextMainDateTime.effectiveKDateTime(), next);
 	if (!next.isValid())
-		mRecurrence->setStartDateTime(recurStart);   // reinstate the old value
+		mRecurrence->setStartDateTime(recurStart, mStartDateTime.isDateOnly());   // reinstate the old value
 	else
 	{
-		mRecurrence->setStartDateTime(next.effectiveKDateTime());
+		mRecurrence->setStartDateTime(next.effectiveKDateTime(), next.isDateOnly());
 		mStartDateTime = mNextMainDateTime = next;
 		mUpdated = changed = true;
 	}
@@ -3054,8 +3054,7 @@
 	if (recurrence.recurs())
 	{
 		mRecurrence = new KARecurrence(recurrence);
-		mRecurrence->setStartDateTime(mStartDateTime.effectiveKDateTime());
-		mRecurrence->setAllDay(mStartDateTime.isDateOnly());
+		mRecurrence->setStartDateTime(mStartDateTime.effectiveKDateTime(), mStartDateTime.isDateOnly());
 		mChanged = true;
 	}
 	else
@@ -3081,7 +3080,7 @@
 void KAEvent::adjustRecurrenceStartOfDay()
 {
 	if (mRecurrence)
-		mRecurrence->setStartDateTime(mStartDateTime.effectiveKDateTime());
+		mRecurrence->setStartDateTime(mStartDateTime.effectiveKDateTime(), mStartDateTime.isDateOnly());
 }
 
 /******************************************************************************
Index: kalarm/karecurrence.h
===================================================================
--- kalarm/karecurrence.h	(révision 1033326)
+++ kalarm/karecurrence.h	(révision 1033327)
@@ -1,7 +1,7 @@
 /*
  *  karecurrence.h  -  recurrence with special yearly February 29th handling
  *  Program:  kalarm
- *  Copyright © 2005-2007 by David Jarvie <djarvie@kde.org>
+ *  Copyright © 2005-2007,2009 by David Jarvie <djarvie@kde.org>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -59,6 +59,8 @@
 		                        { return init(t, freq, count, f29, start, end); }
 		void        fix();
 		void        writeRecurrence(KCal::Recurrence&) const;
+		void        setStartDateTime(const KDateTime& dt, bool dateOnly)
+					{ KCal::Recurrence::setStartDateTime(dt);  if (dateOnly) KCal::Recurrence::setAllDay(true); }
 		KDateTime   endDateTime() const;
 		QDate       endDate() const;
 		bool        recursOn(const QDate&, const KDateTime::Spec&) const;
@@ -74,6 +76,9 @@
 		static void setDefaultFeb29Type(Preferences::Feb29Type t)  { mDefaultFeb29 = t; }
 
 	private:
+		/** Prevent public use: KARecurrence::setStartDateTime() handles all-day setting. */
+		void        setAllDay(bool);
+
 		bool        set(Type, int freq, int count, int feb29Type, const KDateTime& start, const KDateTime& end);
 		bool        init(KCal::RecurrenceRule::PeriodType, int freq, int count, int feb29Type, const KDateTime& start, const KDateTime& end);
 		int         combineDurations(const KCal::RecurrenceRule*, const KCal::RecurrenceRule*, QDate& end) const;
