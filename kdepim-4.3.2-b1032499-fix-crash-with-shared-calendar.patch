# 
# SVN commit 1032499 by djarvie:
# 
# Update date-only alarm trigger times when user changes the start-of-day time.
# Don't write start-of-day time into calendar, to avoid clashes if it is shared.
# 

Index: kalarm/preferences.h
===================================================================
--- kalarm/preferences.h	(révision 1032498)
+++ kalarm/preferences.h	(révision 1032499)
@@ -48,8 +48,6 @@
 		static void             setHolidayRegion(const QString& regionCode);
 		static QTime            startOfDay()                     { return self()->mBase_StartOfDay.time(); }
 		static void             setStartOfDay(const QTime&);
-		static void             updateStartOfDayCheck(const QTime&);
-		static bool             hasStartOfDayChanged()           { return mStartOfDayChanged; }
 		static QTime            workDayStart()                   { return self()->mBase_WorkDayStart.time(); }
 		static QTime            workDayEnd()                     { return self()->mBase_WorkDayEnd.time(); }
 		static QBitArray        workDays();
@@ -86,7 +84,7 @@
 	signals:
 		void  timeZoneChanged(const KTimeZone& newTz);
 		void  holidaysChanged(const KHolidays::HolidayRegion& newHolidays);
-		void  startOfDayChanged(const QTime& newStartOfDay, const QTime& oldStartOfDay);
+		void  startOfDayChanged(const QTime& newStartOfDay);
 		void  workTimeChanged(const QTime& startTime, const QTime& endTime, const QBitArray& workDays);
 
 	private slots:
@@ -108,8 +106,6 @@
 
 		// All the following members are accessed by the Preferences dialog classes
 		static int              mMessageButtonDelay;  // 0 = scatter; -1 = no delay, no scatter; >0 = delay, no scatter
-		static QTime            mOldStartOfDay;       // previous start-of-day time
-		static bool             mStartOfDayChanged;   // start-of-day check value doesn't tally with new StartOfDay
 };
 
 #endif // PREFERENCES_H
Index: kalarm/startdaytimer.cpp
===================================================================
--- kalarm/startdaytimer.cpp	(révision 1032498)
+++ kalarm/startdaytimer.cpp	(révision 1032499)
@@ -1,7 +1,7 @@
 /*
  *  startdaytimer.cpp  -  timer triggered at the user-defined start-of-day time
  *  Program:  kalarm
- *  Copyright (C) 2004, 2005 by David Jarvie <software@astrojar.org.uk>
+ *  Copyright © 2004,2005,2009 by David Jarvie <djarvie@kde.org>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -29,7 +29,7 @@
 StartOfDayTimer::StartOfDayTimer()
 	: DailyTimer(Preferences::startOfDay(), false)
 {
-	Preferences::connect(SIGNAL(startOfDayChanged(const QTime&, const QTime&)), this, SLOT(startOfDayChanged(const QTime&, const QTime&)));
+	Preferences::connect(SIGNAL(startOfDayChanged(const QTime&)), this, SLOT(startOfDayChanged()));
 }
 
 StartOfDayTimer* StartOfDayTimer::instance()
@@ -43,7 +43,7 @@
 * Called when the start-of-day time has changed.
 * The timer is adjusted and if appropriate timer events are triggered now.
 */
-void StartOfDayTimer::startOfDayChanged(const QTime&, const QTime&)
+void StartOfDayTimer::startOfDayChanged()
 {
 	changeTime(Preferences::startOfDay(), true);
 }
Index: kalarm/Changelog
===================================================================
--- kalarm/Changelog	(révision 1032498)
+++ kalarm/Changelog	(révision 1032499)
@@ -4,6 +4,8 @@
 - Fix recurring date-only alarm triggering repeatedly and eating up CPU, if the
   start-of-day time is after midnight and the alarm is due, but current UTC time
   of day is earlier than the start-of-day time of day in the alarm's time zone.
+- Update date-only alarm trigger times when user changes the start-of-day time.
+- Don't write start-of-day time into calendar, to avoid clashes if it is shared.
 
 === Version 2.2.8 (KDE 4.3.2) --- 28 September 2009 ===
 - Use KDE system settings to determine default working days in the week.
Index: kalarm/kalarmapp.cpp
===================================================================
--- kalarm/kalarmapp.cpp	(révision 1032498)
+++ kalarm/kalarmapp.cpp	(révision 1032499)
@@ -128,7 +128,7 @@
 	Preferences::self()->readConfig();
 	Preferences::setAutoStart(true);
 	Preferences::self()->writeConfig();
-	Preferences::connect(SIGNAL(startOfDayChanged(const QTime&, const QTime&)), this, SLOT(changeStartOfDay()));
+	Preferences::connect(SIGNAL(startOfDayChanged(const QTime&)), this, SLOT(changeStartOfDay()));
 	Preferences::connect(SIGNAL(feb29TypeChanged(Feb29Type)), this, SLOT(slotFeb29TypeChanged(Feb29Type)));
 	Preferences::connect(SIGNAL(showInSystemTrayChanged(bool)), this, SLOT(slotShowInSystemTrayChanged()));
 	Preferences::connect(SIGNAL(archivedKeepDaysChanged(int)), this, SLOT(setArchivePurgeDays()));
@@ -143,10 +143,7 @@
 		KConfigGroup config(KGlobal::config(), "General");
 		mNoSystemTray        = config.readEntry("NoSystemTray", false);
 		mOldShowInSystemTray = wantShowInSystemTray();
-		mStartOfDay          = Preferences::startOfDay();
-		if (Preferences::hasStartOfDayChanged())
-			mStartOfDay.setHMS(100,0,0);    // start of day time has changed: flag it as invalid
-		DateTime::setStartOfDay(mStartOfDay);
+		DateTime::setStartOfDay(Preferences::startOfDay());
 		mPrefsArchivedColour = Preferences::archivedColour();
 	}
 
@@ -832,14 +829,8 @@
 */
 void KAlarmApp::changeStartOfDay()
 {
-	QTime sod = Preferences::startOfDay();
-	DateTime::setStartOfDay(sod);
-	AlarmCalendar* cal = AlarmCalendar::resources();
-	if (KAEvent::adjustStartOfDay(cal->kcalEvents(KCalEvent::ACTIVE)))
-		cal->save();
+	DateTime::setStartOfDay(Preferences::startOfDay());
 	AlarmCalendar::resources()->adjustStartOfDay();
-	Preferences::updateStartOfDayCheck(sod);  // now that calendar is updated, set OK flag in config file
-	mStartOfDay = sod;
 }
 
 /******************************************************************************
@@ -1848,8 +1839,6 @@
 	if (firstTime)
 	{
 		kDebug() << "first time";
-		if (!mStartOfDay.isValid())
-			changeStartOfDay();     // start of day time has changed, so adjust date-only alarms
 
 		/* Need to open the display calendar now, since otherwise if display
 		 * alarms are immediately due, they will often be processed while
Index: kalarm/lib/datetime.h
===================================================================
--- kalarm/lib/datetime.h	(révision 1032498)
+++ kalarm/lib/datetime.h	(révision 1032499)
@@ -1,7 +1,7 @@
 /*
  *  datetime.h  -  date/time with start-of-day time for date-only values 
  *  Program:  kalarm
- *  Copyright © 2003,2005-2007 by David Jarvie <software@astrojar.org.uk>
+ *  Copyright © 2003,2005-2007,2009 by David Jarvie <djarvie@kde.org>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -31,7 +31,7 @@
  *  DateTime is very similar to the KDateTime class. The time assumed for date-only values
  *  is the start-of-day time set by setStartOfDay().
  *
- *  @author David Jarvie <software@astrojar.org.uk>
+ *  @author David Jarvie <djarvie@kde.org>
 */
 class DateTime
 {
@@ -83,6 +83,10 @@
 		 *  by setStartOfDay().
 		 */
 		KDateTime effectiveKDateTime() const;
+		/** Returns the date and time of the value as written in the calendar.
+		 *  If the value is date-only, the time part returned is 00:00.
+		 */
+		KDateTime calendarKDateTime() const;
 		/** Returns the time zone of the value. */
 		KTimeZone timeZone() const      { return mDateTime.timeZone(); }
 		/** Returns the time specification of the value. */
Index: kalarm/lib/datetime.cpp
===================================================================
--- kalarm/lib/datetime.cpp	(révision 1032498)
+++ kalarm/lib/datetime.cpp	(révision 1032499)
@@ -1,7 +1,7 @@
 /*
  *  datetime.cpp  -  date/time with start-of-day time for date-only values 
  *  Program:  kalarm
- *  Copyright © 2003,2005-2007 by David Jarvie <software@astrojar.org.uk>
+ *  Copyright © 2003,2005-2007,2009 by David Jarvie <djarvie@kde.org>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -53,6 +53,17 @@
 	return mDateTime;
 }
 
+KDateTime DateTime::calendarKDateTime() const
+{
+	if (mDateTime.isDateOnly())
+	{
+		KDateTime dt = mDateTime;
+		dt.setTime(QTime(0, 0));
+		return dt;
+	}
+	return mDateTime;
+}
+
 QString DateTime::formatLocale(bool shortFormat) const
 {
 	return KGlobal::locale()->formatDateTime(mDateTime, (shortFormat ? KLocale::ShortDate : KLocale::LongDate));
Index: kalarm/alarmevent.cpp
===================================================================
--- kalarm/alarmevent.cpp	(révision 1032498)
+++ kalarm/alarmevent.cpp	(révision 1032499)
@@ -42,8 +42,8 @@
 // KAlarm version which first used the current calendar/event format.
 // If this changes, KAEvent::convertKCalEvents() must be changed correspondingly.
 // The string version is the KAlarm version string used in the calendar file.
-QString KAEvent::calVersionString()  { return QString::fromLatin1("1.9.10"); }
-int     KAEvent::calVersion()        { return KAlarm::Version(1,9,10); }
+QString KAEvent::calVersionString()  { return QString::fromLatin1("2.2.9"); }
+int     KAEvent::calVersion()        { return KAlarm::Version(2,2,9); }
 
 // Custom calendar properties.
 // Note that all custom property names are prefixed with X-KDE-KALARM- in the calendar file.
@@ -1829,14 +1829,17 @@
 
 	/* Always set DTSTART as date/time, and use the category "DATE" to indicate
 	 * a date-only event, instead of calling setAllDay(). This is necessary to
-	 * allow the alarm to float within the 24-hour period defined by the
-	 * start-of-day time rather than midnight to midnight.
+	 * allow a time zone to be specified for a date-only event. Also, KAlarm
+	 * allows the alarm to float within the 24-hour period defined by the
+	 * start-of-day time (which is user-dependent and therefore can't be
+	 * written into the calendar) rather than midnight to midnight, and there
+	 * is no RFC2445 conformant way to specify this. 
 	 * RFC2445 states that alarm trigger times specified in absolute terms
 	 * (rather than relative to DTSTART or DTEND) can only be specified as a
 	 * UTC DATE-TIME value. So always use a time relative to DTSTART instead of
 	 * an absolute time.
 	 */
-	ev->setDtStart(mStartDateTime.effectiveKDateTime());
+	ev->setDtStart(mStartDateTime.calendarKDateTime());
 	ev->setAllDay(false);
 	ev->setHasEndDate(false);
 
@@ -1875,7 +1878,7 @@
 	{
 		DateTime dtl;
 		if (mArchiveRepeatAtLogin)
-			dtl = mStartDateTime.effectiveKDateTime().addDays(-1);
+			dtl = mStartDateTime.calendarKDateTime().addDays(-1);
 		else if (mAtLoginDateTime.isValid())
 			dtl = mAtLoginDateTime;
 		else if (mStartDateTime.isDateOnly())
@@ -1922,12 +1925,12 @@
 		QStringList list;
 		if (mDeferralTime.isDateOnly())
 		{
-			startOffset = nextDateTime.secsTo(mDeferralTime.effectiveKDateTime());
+			startOffset = nextDateTime.secsTo(mDeferralTime.calendarKDateTime());
 			list += DATE_DEFERRAL_TYPE;
 		}
 		else
 		{
-			startOffset = nextDateTime.effectiveKDateTime().secsTo(mDeferralTime.effectiveKDateTime());
+			startOffset = nextDateTime.calendarKDateTime().secsTo(mDeferralTime.calendarKDateTime());
 			list += TIME_DEFERRAL_TYPE;
 		}
 		if (mDeferral == REMINDER_DEFERRAL)
@@ -2006,7 +2009,7 @@
 Alarm* KAEvent::initKCalAlarm(Event* event, const DateTime& dt, const QStringList& types, KAAlarm::Type type) const
 {
 	int startOffset = dt.isDateOnly() ? mStartDateTime.secsTo(dt)
-	                                  : mStartDateTime.effectiveKDateTime().secsTo(dt.effectiveKDateTime());
+	                                  : mStartDateTime.calendarKDateTime().secsTo(dt.calendarKDateTime());
 	return initKCalAlarm(event, startOffset, types, type);
 }
 
@@ -3427,96 +3430,12 @@
 #endif
 
 /******************************************************************************
- * Adjust the time at which date-only events will occur for each of the events
- * in a list. Events for which both date and time are specified are left
- * unchanged.
- * Reply = true if any events have been updated.
- */
-bool KAEvent::adjustStartOfDay(const Event::List& events)
-{
-	bool changed = false;
-	QTime startOfDay = Preferences::startOfDay();
-	for (int ei = 0, eend = events.count();  ei < eend;  ++ei)
-	{
-		Event* event = events[ei];
-		QStringList flags = event->customProperty(KCalendar::APPNAME, FLAGS_PROPERTY).split(SC, QString::SkipEmptyParts);
-		if (flags.indexOf(DATE_ONLY_FLAG) >= 0)
-		{
-			// It's an untimed event, so fix it
-			QTime oldTime = event->dtStart().time();
-			int adjustment = oldTime.secsTo(startOfDay);
-			if (adjustment)
-			{
-				event->setDtStart(KDateTime(event->dtStart().date(), startOfDay, Preferences::timeZone()));
-				Alarm::List alarms = event->alarms();
-				int deferralOffset = 0;
-				for (int ai = 0, aend = alarms.count();  ai < aend;  ++ai)
-				{
-					// Parse the next alarm's text
-					Alarm* alarm = alarms[ai];
-					AlarmData data;
-					readAlarm(alarm, data);
-					if (data.type & KAAlarm::TIMED_DEFERRAL_FLAG)
-					{
-						// Timed deferral alarm, so adjust the offset
-						deferralOffset = alarm->startOffset().asSeconds();
-						alarm->setStartOffset(deferralOffset - adjustment);
-					}
-					else if (data.type == KAAlarm::AUDIO__ALARM
-					&&       alarm->startOffset().asSeconds() == deferralOffset)
-					{
-						// Audio alarm is set for the same time as the deferral alarm
-						alarm->setStartOffset(deferralOffset - adjustment);
-					}
-				}
-				changed = true;
-			}
-		}
-		else
-		{
-			// It's a timed event. Fix any untimed alarms.
-			int deferralOffset = 0;
-			int newDeferralOffset = 0;
-			DateTime start;
-			KDateTime nextMainDateTime = readDateTime(event, false, start).kDateTime();
-			AlarmMap alarmMap;
-			readAlarms(event, &alarmMap);
-			for (AlarmMap::Iterator it = alarmMap.begin();  it != alarmMap.end();  ++it)
-			{
-				const AlarmData& data = it.value();
-				if (!data.alarm->hasStartOffset())
-					continue;
-				if ((data.type & KAAlarm::DEFERRED_ALARM)
-				&&  !(data.type & KAAlarm::TIMED_DEFERRAL_FLAG))
-				{
-					// Date-only deferral alarm, so adjust its time
-					KDateTime altime = data.alarm->startOffset().end(nextMainDateTime);
-					altime.setTime(startOfDay);
-					deferralOffset = data.alarm->startOffset().asSeconds();
-					newDeferralOffset = event->dtStart().secsTo(altime);
-					const_cast<Alarm*>(data.alarm)->setStartOffset(newDeferralOffset);
-					changed = true;
-				}
-				else if (data.type == KAAlarm::AUDIO__ALARM
-				&&       data.alarm->startOffset().asSeconds() == deferralOffset)
-				{
-					// Audio alarm is set for the same time as the deferral alarm
-					const_cast<Alarm*>(data.alarm)->setStartOffset(newDeferralOffset);
-					changed = true;
-				}
-			}
-		}
-	}
-	return changed;
-}
-
-/******************************************************************************
  * If the calendar was written by a previous version of KAlarm, do any
  * necessary format conversions on the events to ensure that when the calendar
  * is saved, no information is lost or corrupted.
  * Reply = true if any conversions were done.
  */
-bool KAEvent::convertKCalEvents(KCal::CalendarLocal& calendar, int version, bool adjustSummerTime)
+bool KAEvent::convertKCalEvents(KCal::CalendarLocal& calendar, int calendarVersion, bool adjustSummerTime)
 {
 	// KAlarm pre-0.9 codes held in the alarm's DESCRIPTION property
 	static const QChar   SEPARATOR        = QLatin1Char(';');
@@ -3556,25 +3475,28 @@
 	// KAlarm pre-1.5.0/1.9.9 properties
 	static const QByteArray KMAIL_ID_PROPERTY("KMAILID");    // X-KDE-KALARM-KMAILID property
 
-	if (version >= calVersion())
+	if (calendarVersion >= calVersion())
 		return false;
 
-	kDebug() << "Adjusting version" << version;
-	bool pre_0_7    = (version < KAlarm::Version(0,7,0));
-	bool pre_0_9    = (version < KAlarm::Version(0,9,0));
-	bool pre_0_9_2  = (version < KAlarm::Version(0,9,2));
-	bool pre_1_1_1  = (version < KAlarm::Version(1,1,1));
-	bool pre_1_2_1  = (version < KAlarm::Version(1,2,1));
-	bool pre_1_3_0  = (version < KAlarm::Version(1,3,0));
-	bool pre_1_3_1  = (version < KAlarm::Version(1,3,1));
-	bool pre_1_4_14 = (version < KAlarm::Version(1,4,14));
-	bool pre_1_5_0  = (version < KAlarm::Version(1,5,0));
-	bool pre_1_9_0  = (version < KAlarm::Version(1,9,0));
-	bool pre_1_9_2  = (version < KAlarm::Version(1,9,2));
-	bool pre_1_9_7  = (version < KAlarm::Version(1,9,7));
-	bool pre_1_9_9  = (version < KAlarm::Version(1,9,9));
-	bool pre_1_9_10 = (version < KAlarm::Version(1,9,10));
-	Q_ASSERT(calVersion() == KAlarm::Version(1,9,10));
+	kDebug() << "Adjusting version" << calendarVersion;
+	bool pre_0_7    = (calendarVersion < KAlarm::Version(0,7,0));
+	bool pre_0_9    = (calendarVersion < KAlarm::Version(0,9,0));
+	bool pre_0_9_2  = (calendarVersion < KAlarm::Version(0,9,2));
+	bool pre_1_1_1  = (calendarVersion < KAlarm::Version(1,1,1));
+	bool pre_1_2_1  = (calendarVersion < KAlarm::Version(1,2,1));
+	bool pre_1_3_0  = (calendarVersion < KAlarm::Version(1,3,0));
+	bool pre_1_3_1  = (calendarVersion < KAlarm::Version(1,3,1));
+	bool pre_1_4_14 = (calendarVersion < KAlarm::Version(1,4,14));
+	bool pre_1_5_0  = (calendarVersion < KAlarm::Version(1,5,0));
+	bool pre_1_9_0  = (calendarVersion < KAlarm::Version(1,9,0));
+	bool pre_1_9_2  = (calendarVersion < KAlarm::Version(1,9,2));
+	bool pre_1_9_7  = (calendarVersion < KAlarm::Version(1,9,7));
+	bool pre_1_9_9  = (calendarVersion < KAlarm::Version(1,9,9));
+	bool pre_1_9_10 = (calendarVersion < KAlarm::Version(1,9,10));
+	bool pre_2_2_9  = (calendarVersion < KAlarm::Version(2,2,9));
+	bool pre_2_3_0  = (calendarVersion < KAlarm::Version(2,3,0));
+	bool pre_2_3_2  = (calendarVersion < KAlarm::Version(2,3,2));
+	Q_ASSERT(calVersion() == KAlarm::Version(2,2,9));
 
 	QTime startOfDay = Preferences::startOfDay();
 	KTimeZone localZone;
@@ -4046,6 +3968,16 @@
 		}
 #endif
 
+		if (pre_2_2_9  ||  (pre_2_3_2 && !pre_2_3_0))
+		{
+			/*
+			 * It's a KAlarm pre-2.2.9 or KAlarm 2.3 series pre-2.3.2 calendar file.
+			 * Set the time in the calendar for all date-only alarms to 00:00.
+			 */
+			if (convertStartOfDay(event))
+				converted = true;
+		}
+
 		if (readOnly)
 			event->setReadOnly(true);
 		event->endUpdates();     // finally issue an update notification
@@ -4053,6 +3985,84 @@
 	return converted;
 }
 
+/******************************************************************************
+* Set the time for a date-only event to 00:00.
+* Reply = true if the event was updated.
+*/
+bool KAEvent::convertStartOfDay(Event* event)
+{
+	bool changed = false;
+	QTime midnight(0, 0);
+	QStringList flags = event->customProperty(KCalendar::APPNAME, FLAGS_PROPERTY).split(SC, QString::SkipEmptyParts);
+	if (flags.indexOf(DATE_ONLY_FLAG) >= 0)
+	{
+		// It's an untimed event, so fix it
+		QTime oldTime = event->dtStart().time();
+		int adjustment = oldTime.secsTo(midnight);
+		if (adjustment)
+		{
+			event->setDtStart(KDateTime(event->dtStart().date(), midnight, Preferences::timeZone()));
+			Alarm::List alarms = event->alarms();
+			int deferralOffset = 0;
+			for (int ai = 0, aend = alarms.count();  ai < aend;  ++ai)
+			{
+				// Parse the next alarm's text
+				Alarm* alarm = alarms[ai];
+				AlarmData data;
+				readAlarm(alarm, data);
+				if (data.type & KAAlarm::TIMED_DEFERRAL_FLAG)
+				{
+					// Timed deferral alarm, so adjust the offset
+					deferralOffset = alarm->startOffset().asSeconds();
+					alarm->setStartOffset(deferralOffset - adjustment);
+				}
+				else if (data.type == KAAlarm::AUDIO__ALARM
+				&&       alarm->startOffset().asSeconds() == deferralOffset)
+				{
+					// Audio alarm is set for the same time as the deferral alarm
+					alarm->setStartOffset(deferralOffset - adjustment);
+				}
+			}
+			changed = true;
+		}
+	}
+	else
+	{
+		// It's a timed event. Fix any untimed alarms.
+		int deferralOffset = 0;
+		int newDeferralOffset = 0;
+		DateTime start;
+		KDateTime nextMainDateTime = readDateTime(event, false, start).kDateTime();
+		AlarmMap alarmMap;
+		readAlarms(event, &alarmMap);
+		for (AlarmMap::Iterator it = alarmMap.begin();  it != alarmMap.end();  ++it)
+		{
+			const AlarmData& data = it.value();
+			if (!data.alarm->hasStartOffset())
+				continue;
+			if ((data.type & KAAlarm::DEFERRED_ALARM)
+			&&  !(data.type & KAAlarm::TIMED_DEFERRAL_FLAG))
+			{
+				// Date-only deferral alarm, so adjust its time
+				KDateTime altime = data.alarm->startOffset().end(nextMainDateTime);
+				altime.setTime(midnight);
+				deferralOffset = data.alarm->startOffset().asSeconds();
+				newDeferralOffset = event->dtStart().secsTo(altime);
+				const_cast<Alarm*>(data.alarm)->setStartOffset(newDeferralOffset);
+				changed = true;
+			}
+			else if (data.type == KAAlarm::AUDIO__ALARM
+			&&       data.alarm->startOffset().asSeconds() == deferralOffset)
+			{
+				// Audio alarm is set for the same time as the deferral alarm
+				const_cast<Alarm*>(data.alarm)->setStartOffset(newDeferralOffset);
+				changed = true;
+			}
+		}
+	}
+	return changed;
+}
+
 #if 0
 /******************************************************************************
 * If the calendar was written by a pre-1.9.10 version of KAlarm, or another
Index: kalarm/preferences.cpp
===================================================================
--- kalarm/preferences.cpp	(révision 1032498)
+++ kalarm/preferences.cpp	(révision 1032499)
@@ -68,8 +68,6 @@
 bool           Preferences::mUsingDefaults = false;
 KTimeZone      Preferences::mSystemTimeZone;
 HolidayRegion* Preferences::mHolidays = 0;   // always non-null after Preferences initialisation
-QTime          Preferences::mOldStartOfDay(0, 0, 0);
-bool           Preferences::mStartOfDayChanged = false;
 
 
 Preferences* Preferences::self()
@@ -151,49 +149,21 @@
 	emit mInstance->holidaysChanged(holidays());
 }
 
-static const int SODxor = 0x82451630;
-inline int Preferences::startOfDayCheck(const QTime& t)
-{
-	// Combine with a 'random' constant to prevent 'clever' people fiddling the
-	// value, and thereby screwing things up.
-	return QTime().msecsTo(t) ^ SODxor;
-}
-
 void Preferences::setStartOfDay(const QTime& t)
 {
-	self()->setBase_StartOfDay(QDateTime(QDate(1900,1,1), t));
-	// Combine with a 'random' constant to prevent 'clever' people fiddling the
-	// value, and thereby screwing things up.
-	updateStartOfDayCheck(t);
-	if (t != mOldStartOfDay)
+	if (t != self()->mBase_StartOfDay.time())
 	{
-		emit mInstance->startOfDayChanged(t, mOldStartOfDay);
-		mOldStartOfDay = t;
+		self()->setBase_StartOfDay(QDateTime(QDate(1900,1,1), t));
+		emit mInstance->startOfDayChanged(t);
 	}
 }
 
 // Called when the start of day value has changed in the config file
 void Preferences::startDayChange(const QDateTime& dt)
 {
-	int SOD = sod();
-	if (SOD)
-		mOldStartOfDay = QTime(0,0).addMSecs(SOD ^ SODxor);
-	QTime t = dt.time();
-	mStartOfDayChanged = (t != mOldStartOfDay);
-	if (mStartOfDayChanged)
-	{
-		emit mInstance->startOfDayChanged(t, mOldStartOfDay);
-		mOldStartOfDay = t;
-	}
+	emit mInstance->startOfDayChanged(dt.time());
 }
 
-void Preferences::updateStartOfDayCheck(const QTime& t)
-{
-	self()->setSod(startOfDayCheck(t));
-	self()->writeConfig();
-	mStartOfDayChanged = false;
-}
-
 QBitArray Preferences::workDays()
 {
 	unsigned days = self()->base_WorkDays();
Index: kalarm/alarmevent.h
===================================================================
--- kalarm/alarmevent.h	(révision 1032498)
+++ kalarm/alarmevent.h	(révision 1032499)
@@ -465,8 +465,7 @@
 #endif
 		static int         calVersion();
 		static QString     calVersionString();
-		static bool        adjustStartOfDay(const KCal::Event::List&);
-		static bool        convertKCalEvents(KCal::CalendarLocal&, int version, bool adjustSummerTime);
+		static bool        convertKCalEvents(KCal::CalendarLocal&, int calendarVersion, bool adjustSummerTime);
 //		static bool        convertRepetitions(KCal::CalendarLocal&);
 
 	private:
@@ -488,6 +487,7 @@
 		void               calcTriggerTimes() const;
 		void               calcNextWorkingTime(const DateTime& nextTrigger) const;
 		DateTime           nextWorkingTime() const;
+		static bool        convertStartOfDay(KCal::Event*);
 		static bool        convertRepetition(KCal::Event*);
 		KCal::Alarm*       initKCalAlarm(KCal::Event*, const DateTime&, const QStringList& types, KAAlarm::Type = KAAlarm::INVALID_ALARM) const;
 		KCal::Alarm*       initKCalAlarm(KCal::Event*, int startOffsetSecs, const QStringList& types, KAAlarm::Type = KAAlarm::INVALID_ALARM) const;
Index: kalarm/kalarmconfig.kcfg
===================================================================
--- kalarm/kalarmconfig.kcfg	(révision 1032498)
+++ kalarm/kalarmconfig.kcfg	(révision 1032499)
@@ -174,11 +174,6 @@
       <default>QDateTime(QDate(1900,1,1),QTime(0,0))</default>
       <emit signal="base_StartOfDayChanged"/>
     </entry>
-    <entry name="Sod" type="Int" hidden="true">
-      <label context="@label">Start of day validation</label>
-      <whatsthis context="@info:whatsthis">Do not change this value!</whatsthis>
-      <default>0</default>
-    </entry>
     <entry name="Base_WorkDayStart" key="WorkDayStart" type="DateTime">
       <label context="@label">Start time of working day</label>
       <whatsthis context="@info:whatsthis">The start time of the working day.</whatsthis>
Index: kalarm/startdaytimer.h
===================================================================
--- kalarm/startdaytimer.h	(révision 1032498)
+++ kalarm/startdaytimer.h	(révision 1032499)
@@ -1,7 +1,7 @@
 /*
  *  startdaytimer.h  -  timer triggered at the user-defined start-of-day time
  *  Program:  kalarm
- *  Copyright © 2004,2005 by David Jarvie <software@astrojar.org.uk>
+ *  Copyright © 2004,2005,2009 by David Jarvie <djarvie@kde.org>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -30,7 +30,7 @@
  *  start-of-day time (set in KAlarm's Preferences dialog).
  *  It automatically adjusts to any changes in the start-of-day time.
  *
- *  @author David Jarvie <software@astrojar.org.uk>
+ *  @author David Jarvie <djarvie@kde.org>
  */
 class StartOfDayTimer : public DailyTimer
 {
@@ -56,7 +56,7 @@
 		static StartOfDayTimer* instance();
 
 	private slots:
-		void        startOfDayChanged(const QTime& newStartOfDay, const QTime& oldStartOfDay);
+		void startOfDayChanged();
 
 	private:
 		static StartOfDayTimer* mInstance;    // exists solely to receive signals
Index: kalarm/kalarmapp.h
===================================================================
--- kalarm/kalarmapp.h	(révision 1032498)
+++ kalarm/kalarmapp.h	(révision 1032499)
@@ -173,7 +173,6 @@
 		DBusHandler*       mDBusHandler;         // the parent of the main DCOP receiver object
 		TrayWindow*        mTrayWindow;          // active system tray icon
 		QTimer*            mAlarmTimer;          // activates KAlarm when next alarm is due
-		QTime              mStartOfDay;          // start-of-day time currently in use
 		QColor             mPrefsArchivedColour; // archived alarms text colour
 		int                mArchivedPurgeDays;   // how long to keep archived alarms, 0 = don't keep, -1 = keep indefinitely
 		int                mPurgeDaysQueued;     // >= 0 to purge the archive calendar from KAlarmApp::processLoop()
